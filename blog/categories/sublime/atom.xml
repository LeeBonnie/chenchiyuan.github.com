<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sublime | Shadow]]></title>
  <link href="http://chenchiyuan.github.com/blog/categories/sublime/atom.xml" rel="self"/>
  <link href="http://chenchiyuan.github.com/"/>
  <updated>2012-12-26T23:35:16+08:00</updated>
  <id>http://chenchiyuan.github.com/</id>
  <author>
    <name><![CDATA[陈驰远]]></name>
    <email><![CDATA[chenchiyuan03@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime之Ctags]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/26/sublimezhi-ctags/"/>
    <updated>2012-12-26T21:32:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/26/sublimezhi-ctags</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>之前在博客里埋了一个坑，如何使用Ctags实现类似于Pycharm的点击跳转到定义处的功能。这个功能强大之处在于，你可以方便的寻找到源码，看它的注释，分析他的代码，这非常有助于你了解作者的逻辑，同时，也能展现给你优秀程序员的代码之美。</p>

<!--more-->


<h2>怎么实现？</h2>

<p>为了方便那些只求答案的同学，我将实现方式贴在下面。</p>

<p>假设你需要建立索引的源头有两个。</p>

<h4>1. 你的当前项目路径$PROJECT</h4>

<h4>2. 你的Python源码以及第三方的根路径$SRC</h4>

<p><code>
1. ctags -R -f $PROJECT/.tags $PROJECT --languages=Python
2. ctags -R -f $PROJECT/.tags -a $SRC --languages=Python
</code>
以后每需要新增一个目录，都可以通过以下命令来实现
<code>
ctags -R -f $PROJECT/.tags - a $DIR --languages=Python
</code>
当然它可以从某个文件中读取相应的目录列表，我的需求目录只有两个，就没这样写配置。</p>

<h2>Ctags的介绍</h2>

<p>ctags用官方的解释就是产生标记文件，帮助在文件中定位对象。其实就是你可以找到一个对象的定义处。</p>

<h4>实现原理</h4>

<p>Ctags会将定义的对象索引化，记录他的出处。用Python伪代码来形容下
```
{</p>

<pre><code>'a': [path_a, path_b],
'b': [path_c, ]
...
</code></pre>

<p>}
```
每当找到一个需要定义对象的时候，他都会在HashTable里面增加对象地址的记录。这样，以后扫元素的时候，它可以从列表中读出相应的位置，点击完成跳转。<font color="red">(个人理解，他的实现肯定更加严谨高效)</font></p>

<h4>读读参数表</h4>

<p>```
ctags --help
Usage: ctags [options] [file(s)]</p>

<p>  -a   Append the tags to an existing tag file.
  -B   Use backward searching patterns (?...?).
  -e   Output tag file for use with Emacs.
  -f <name></p>

<pre><code>   Write tags to specified file. Value of "-" writes tags to stdout
   ["tags"; or "TAGS" when -e supplied].
</code></pre>

<p>  -F   Use forward searching patterns (/.../) (default).
  -h <list></p>

<pre><code>   Specify list of file extensions to be treated as include files.
   [".h.H.hh.hpp.hxx.h++"].
</code></pre>

<p>  -I &lt;list|@file></p>

<pre><code>   A list of tokens to be specially handled is read from either the
   command line or the specified file.
</code></pre>

<p>  -L <file></p>

<pre><code>   A list of source file names are read from the specified file.
   If specified as "-", then standard input is read.
</code></pre>

<p>  -n   Equivalent to --excmd=number.
  -N   Equivalent to --excmd=pattern.
  -o   Alternative for -f.
  -R   Equivalent to --recurse.
  -u   Equivalent to --sort=no.
  -V   Equivalent to --verbose.
  -x   Print a tabular cross reference file to standard output.
  --append=[yes|no]</p>

<pre><code>   Should tags should be appended to existing tag file [no]?
</code></pre>

<p>  --etags-include=file</p>

<pre><code>  Include reference to 'file' in Emacs-style tag file (requires -e).
</code></pre>

<p>  --exclude=pattern</p>

<pre><code>  Exclude files and directories matching 'pattern'.
</code></pre>

<p>  --excmd=number|pattern|mix</p>

<pre><code>   Uses the specified type of EX command to locate tags [pattern].
</code></pre>

<p>  --extra=[+|-]flags</p>

<pre><code>  Include extra tag entries for selected information (flags: "fq").
</code></pre>

<p>  --fields=[+|-]flags</p>

<pre><code>  Include selected extension fields (flags: "afmikKlnsStz") [fks].
</code></pre>

<p>  --file-scope=[yes|no]</p>

<pre><code>   Should tags scoped only for a single file (e.g. "static" tags
   be included in the output [yes]?
</code></pre>

<p>  --filter=[yes|no]</p>

<pre><code>   Behave as a filter, reading file names from standard input and
   writing tags to standard output [no].
</code></pre>

<p>  --filter-terminator=string</p>

<pre><code>   Specify string to print to stdout following the tags for each file
   parsed when --filter is enabled.
</code></pre>

<p>  --format=level</p>

<pre><code>   Force output of specified tag file format [2].
</code></pre>

<p>  --help</p>

<pre><code>   Print this option summary.
</code></pre>

<p>  --if0=[yes|no]</p>

<pre><code>   Should C code within #if 0 conditional branches be parsed [no]?
</code></pre>

<p>  --<LANG>-kinds=[+|-]kinds</p>

<pre><code>   Enable/disable tag kinds for language &lt;LANG&gt;.
</code></pre>

<p>  --langdef=name</p>

<pre><code>   Define a new language to be parsed with regular expressions.
</code></pre>

<p>  --langmap=map(s)</p>

<pre><code>   Override default mapping of language to source file extension.
</code></pre>

<p>  --language-force=language</p>

<pre><code>   Force all files to be interpreted using specified language.
</code></pre>

<p>  --languages=[+|-]list</p>

<pre><code>   Restrict files scanned for tags to those mapped to langauges
   specified in the comma-separated 'list'. The list can contain any
   built-in or user-defined language [all].
</code></pre>

<p>  --license</p>

<pre><code>   Print details of software license.
</code></pre>

<p>  --line-directives=[yes|no]</p>

<pre><code>   Should #line directives be processed [no]?
</code></pre>

<p>  --links=[yes|no]</p>

<pre><code>   Indicate whether symbolic links should be followed [yes].
</code></pre>

<p>  --list-kinds=[language|all]</p>

<pre><code>   Output a list of all tag kinds for specified language or all.
</code></pre>

<p>  --list-languages</p>

<pre><code>   Output list of supported languages.
</code></pre>

<p>  --list-maps=[language|all]</p>

<pre><code>   Output list of language mappings.
</code></pre>

<p>  --options=file</p>

<pre><code>   Specify file from which command line options should be read.
</code></pre>

<p>  --recurse=[yes|no]</p>

<pre><code>   Recurse into directories supplied on command line [no].
</code></pre>

<p>  --regex-<LANG>=/line_pattern/name_pattern/[flags]</p>

<pre><code>   Define regular expression for locating tags in specific language.
</code></pre>

<p>  --sort=[yes|no|foldcase]</p>

<pre><code>   Should tags be sorted (optionally ignoring case) [yes]?.
</code></pre>

<p>  --tag-relative=[yes|no]</p>

<pre><code>   Should paths be relative to location of tag file [no; yes when -e]?
</code></pre>

<p>  --totals=[yes|no]</p>

<pre><code>   Print statistics about source and tag files [no].
</code></pre>

<p>  --verbose=[yes|no]</p>

<pre><code>   Enable verbose messages describing actions on each source file.
</code></pre>

<p>  --version</p>

<pre><code>   Print version identifier to standard output.
</code></pre>

<p>```</p>

<h2>我知道你懒得看，我来讲讲几个重要的</h2>

<h4>1. Ctags能识别哪些语言呢？</h4>

<p><code>
ctags --list-languages
一堆，自己看看。主流的基本都有了。
</code></p>

<h4>2. 语言它会找相应的文件</h4>

<p><code>
ctags --list-maps
Python   *.py *.pyx *.pxd *.pxi *.scons # 以Python为例子
</code></p>

<h4>3. Python它会识别什么语言元素？</h4>

<p><code>
ctags --list-kinds=Python
c  classes
f  functions
m  class members
v  variables
i  imports
</code>
可见，它会将类，函数，成员，变量和引入作为元素来生成索引。所以在Sublime里面你点击文件或者模块，他是不会跳转到相应的位置的(稍后研究下怎么解决)。</p>

<h4>4. 之前介绍命令的含义</h4>

<p><code>
-R 递归的寻找目录的子目录
-f 将索引写入指定文件，Sublime的插件Ctags读的是**当前视图的.tags文件**。
-a 追加索引
--languages 选择语言解释器
</code>
所以之前两句的解释是这样
<code>
ctags -R -f $PROJECT/.tags $PROJECT --languages=Python
</code>
递归的将项目目录的文件使用Python解释器建立索引写入项目目录的.tags文件中</p>

<p><code>
ctags -R -f $PROJECT/.tags -a $SRC --languages=Python
</code>
递归的将SRC目录的文件使用Python解释器建立索引追加到项目目录的.tags文件中
之后Sublime的插件Ctags会读取当前试图下的.tags文件，完成点击跳转的功能。</p>

<h4>5. 还不懂或者没解决问题？</h4>

<p>自己Google吧，答案就在其中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime的TodoList]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/26/sublimede-todolist/"/>
    <updated>2012-12-26T00:12:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/26/sublimede-todolist</id>
    <content type="html"><![CDATA[<h2>睡不着觉, 逛了下github, 发现个货</h2>

<p><a href="https://github.com/aziz/PlainTasks">PlainTasks</a>是一个Sublime的Todo List插件。Cool，虽然我用<a href="http://www.any.do/">Any.do</a>基本解决了我的需求，还是推荐下。</p>

<!--more-->


<h2>干啥子的？</h2>

<p>看一张图你就懂了</p>

<p><img src="/images/photos/sublime_plaintext.png"></p>

<h2>安装</h2>

<p>直接在Package Control里面安装PlainTasks就好了。Control+Shift+p，唤醒交互，输入PlianTasks,点击安装。</p>

<h2>使用</h2>

<p>安装完成之后，Control+Shift+p，唤醒交互，输入tasks。</p>

<h4>1. 新建任务</h4>

<p>command+回车 或者 command+i</p>

<h4>2. 标记完成</h4>

<p>command+d</p>

<h4>3. 标记取消</h4>

<p>command+m</p>

<h4>4. 打包</h4>

<p>command+shift+a</p>

<h4>5. 打标签</h4>

<p>在文本后面添加@标签内容，当你标记完成或者取消的时候，他会自动打上标签。</p>
]]></content>
  </entry>
  
</feed>
