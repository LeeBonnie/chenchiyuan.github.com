<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Shadow]]></title>
  <link href="http://chenchiyuan.github.com/atom.xml" rel="self"/>
  <link href="http://chenchiyuan.github.com/"/>
  <updated>2012-12-26T23:35:16+08:00</updated>
  <id>http://chenchiyuan.github.com/</id>
  <author>
    <name><![CDATA[陈驰远]]></name>
    <email><![CDATA[chenchiyuan03@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sublime之Ctags]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/26/sublimezhi-ctags/"/>
    <updated>2012-12-26T21:32:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/26/sublimezhi-ctags</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>之前在博客里埋了一个坑，如何使用Ctags实现类似于Pycharm的点击跳转到定义处的功能。这个功能强大之处在于，你可以方便的寻找到源码，看它的注释，分析他的代码，这非常有助于你了解作者的逻辑，同时，也能展现给你优秀程序员的代码之美。</p>

<!--more-->


<h2>怎么实现？</h2>

<p>为了方便那些只求答案的同学，我将实现方式贴在下面。</p>

<p>假设你需要建立索引的源头有两个。</p>

<h4>1. 你的当前项目路径$PROJECT</h4>

<h4>2. 你的Python源码以及第三方的根路径$SRC</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. ctags -R -f $PROJECT/.tags $PROJECT --languages=Python
</span><span class='line'>2. ctags -R -f $PROJECT/.tags -a $SRC --languages=Python</span></code></pre></td></tr></table></div></figure>


<p>以后每需要新增一个目录，都可以通过以下命令来实现</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags -R -f $PROJECT/.tags - a $DIR --languages=Python</span></code></pre></td></tr></table></div></figure>


<p>当然它可以从某个文件中读取相应的目录列表，我的需求目录只有两个，就没这样写配置。</p>

<h2>Ctags的介绍</h2>

<p>ctags用官方的解释就是产生标记文件，帮助在文件中定位对象。其实就是你可以找到一个对象的定义处。</p>

<h4>实现原理</h4>

<p>Ctags会将定义的对象索引化，记录他的出处。用Python伪代码来形容下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    'a': [path_a, path_b],
</span><span class='line'>    'b': [path_c, ]
</span><span class='line'>    ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>每当找到一个需要定义对象的时候，他都会在HashTable里面增加对象地址的记录。这样，以后扫元素的时候，它可以从列表中读出相应的位置，点击完成跳转。<font color="red">(个人理解，他的实现肯定更加严谨高效)</font></p>

<h4>读读参数表</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags --help
</span><span class='line'>Usage: ctags [options] [file(s)]
</span><span class='line'>
</span><span class='line'>  -a   Append the tags to an existing tag file.
</span><span class='line'>  -B   Use backward searching patterns (?...?).
</span><span class='line'>  -e   Output tag file for use with Emacs.
</span><span class='line'>  -f &lt;name&gt;
</span><span class='line'>       Write tags to specified file. Value of "-" writes tags to stdout
</span><span class='line'>       ["tags"; or "TAGS" when -e supplied].
</span><span class='line'>  -F   Use forward searching patterns (/.../) (default).
</span><span class='line'>  -h &lt;list&gt;
</span><span class='line'>       Specify list of file extensions to be treated as include files.
</span><span class='line'>       [".h.H.hh.hpp.hxx.h++"].
</span><span class='line'>  -I &lt;list|@file&gt;
</span><span class='line'>       A list of tokens to be specially handled is read from either the
</span><span class='line'>       command line or the specified file.
</span><span class='line'>  -L &lt;file&gt;
</span><span class='line'>       A list of source file names are read from the specified file.
</span><span class='line'>       If specified as "-", then standard input is read.
</span><span class='line'>  -n   Equivalent to --excmd=number.
</span><span class='line'>  -N   Equivalent to --excmd=pattern.
</span><span class='line'>  -o   Alternative for -f.
</span><span class='line'>  -R   Equivalent to --recurse.
</span><span class='line'>  -u   Equivalent to --sort=no.
</span><span class='line'>  -V   Equivalent to --verbose.
</span><span class='line'>  -x   Print a tabular cross reference file to standard output.
</span><span class='line'>  --append=[yes|no]
</span><span class='line'>       Should tags should be appended to existing tag file [no]?
</span><span class='line'>  --etags-include=file
</span><span class='line'>      Include reference to 'file' in Emacs-style tag file (requires -e).
</span><span class='line'>  --exclude=pattern
</span><span class='line'>      Exclude files and directories matching 'pattern'.
</span><span class='line'>  --excmd=number|pattern|mix
</span><span class='line'>       Uses the specified type of EX command to locate tags [pattern].
</span><span class='line'>  --extra=[+|-]flags
</span><span class='line'>      Include extra tag entries for selected information (flags: "fq").
</span><span class='line'>  --fields=[+|-]flags
</span><span class='line'>      Include selected extension fields (flags: "afmikKlnsStz") [fks].
</span><span class='line'>  --file-scope=[yes|no]
</span><span class='line'>       Should tags scoped only for a single file (e.g. "static" tags
</span><span class='line'>       be included in the output [yes]?
</span><span class='line'>  --filter=[yes|no]
</span><span class='line'>       Behave as a filter, reading file names from standard input and
</span><span class='line'>       writing tags to standard output [no].
</span><span class='line'>  --filter-terminator=string
</span><span class='line'>       Specify string to print to stdout following the tags for each file
</span><span class='line'>       parsed when --filter is enabled.
</span><span class='line'>  --format=level
</span><span class='line'>       Force output of specified tag file format [2].
</span><span class='line'>  --help
</span><span class='line'>       Print this option summary.
</span><span class='line'>  --if0=[yes|no]
</span><span class='line'>       Should C code within #if 0 conditional branches be parsed [no]?
</span><span class='line'>  --&lt;LANG&gt;-kinds=[+|-]kinds
</span><span class='line'>       Enable/disable tag kinds for language &lt;LANG&gt;.
</span><span class='line'>  --langdef=name
</span><span class='line'>       Define a new language to be parsed with regular expressions.
</span><span class='line'>  --langmap=map(s)
</span><span class='line'>       Override default mapping of language to source file extension.
</span><span class='line'>  --language-force=language
</span><span class='line'>       Force all files to be interpreted using specified language.
</span><span class='line'>  --languages=[+|-]list
</span><span class='line'>       Restrict files scanned for tags to those mapped to langauges
</span><span class='line'>       specified in the comma-separated 'list'. The list can contain any
</span><span class='line'>       built-in or user-defined language [all].
</span><span class='line'>  --license
</span><span class='line'>       Print details of software license.
</span><span class='line'>  --line-directives=[yes|no]
</span><span class='line'>       Should #line directives be processed [no]?
</span><span class='line'>  --links=[yes|no]
</span><span class='line'>       Indicate whether symbolic links should be followed [yes].
</span><span class='line'>  --list-kinds=[language|all]
</span><span class='line'>       Output a list of all tag kinds for specified language or all.
</span><span class='line'>  --list-languages
</span><span class='line'>       Output list of supported languages.
</span><span class='line'>  --list-maps=[language|all]
</span><span class='line'>       Output list of language mappings.
</span><span class='line'>  --options=file
</span><span class='line'>       Specify file from which command line options should be read.
</span><span class='line'>  --recurse=[yes|no]
</span><span class='line'>       Recurse into directories supplied on command line [no].
</span><span class='line'>  --regex-&lt;LANG&gt;=/line_pattern/name_pattern/[flags]
</span><span class='line'>       Define regular expression for locating tags in specific language.
</span><span class='line'>  --sort=[yes|no|foldcase]
</span><span class='line'>       Should tags be sorted (optionally ignoring case) [yes]?.
</span><span class='line'>  --tag-relative=[yes|no]
</span><span class='line'>       Should paths be relative to location of tag file [no; yes when -e]?
</span><span class='line'>  --totals=[yes|no]
</span><span class='line'>       Print statistics about source and tag files [no].
</span><span class='line'>  --verbose=[yes|no]
</span><span class='line'>       Enable verbose messages describing actions on each source file.
</span><span class='line'>  --version
</span><span class='line'>       Print version identifier to standard output.</span></code></pre></td></tr></table></div></figure>


<h2>我知道你懒得看，我来讲讲几个重要的</h2>

<h4>1. Ctags能识别哪些语言呢？</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags --list-languages
</span><span class='line'>一堆，自己看看。主流的基本都有了。</span></code></pre></td></tr></table></div></figure>


<h4>2. 语言它会找相应的文件</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags --list-maps
</span><span class='line'>Python   *.py *.pyx *.pxd *.pxi *.scons # 以Python为例子</span></code></pre></td></tr></table></div></figure>


<h4>3. Python它会识别什么语言元素？</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags --list-kinds=Python
</span><span class='line'>c  classes
</span><span class='line'>f  functions
</span><span class='line'>m  class members
</span><span class='line'>v  variables
</span><span class='line'>i  imports</span></code></pre></td></tr></table></div></figure>


<p>可见，它会将类，函数，成员，变量和引入作为元素来生成索引。所以在Sublime里面你点击文件或者模块，他是不会跳转到相应的位置的(稍后研究下怎么解决)。</p>

<h4>4. 之前介绍命令的含义</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-R 递归的寻找目录的子目录
</span><span class='line'>-f 将索引写入指定文件，Sublime的插件Ctags读的是**当前视图的.tags文件**。
</span><span class='line'>-a 追加索引
</span><span class='line'>--languages 选择语言解释器</span></code></pre></td></tr></table></div></figure>


<p>所以之前两句的解释是这样</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags -R -f $PROJECT/.tags $PROJECT --languages=Python </span></code></pre></td></tr></table></div></figure>


<p>递归的将项目目录的文件使用Python解释器建立索引写入项目目录的.tags文件中</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ctags -R -f $PROJECT/.tags -a $SRC --languages=Python</span></code></pre></td></tr></table></div></figure>


<p>递归的将SRC目录的文件使用Python解释器建立索引追加到项目目录的.tags文件中
之后Sublime的插件Ctags会读取当前试图下的.tags文件，完成点击跳转的功能。</p>

<h4>5. 还不懂或者没解决问题？</h4>

<p>自己Google吧，答案就在其中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime的TodoList]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/26/sublimede-todolist/"/>
    <updated>2012-12-26T00:12:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/26/sublimede-todolist</id>
    <content type="html"><![CDATA[<h2>睡不着觉, 逛了下github, 发现个货</h2>

<p><a href="https://github.com/aziz/PlainTasks">PlainTasks</a>是一个Sublime的Todo List插件。Cool，虽然我用<a href="http://www.any.do/">Any.do</a>基本解决了我的需求，还是推荐下。</p>

<!--more-->


<h2>干啥子的？</h2>

<p>看一张图你就懂了</p>

<p><img src="http://chenchiyuan.github.com/images/photos/sublime_plaintext.png"></p>

<h2>安装</h2>

<p>直接在Package Control里面安装PlainTasks就好了。Control+Shift+p，唤醒交互，输入PlianTasks,点击安装。</p>

<h2>使用</h2>

<p>安装完成之后，Control+Shift+p，唤醒交互，输入tasks。</p>

<h4>1. 新建任务</h4>

<p>command+回车 或者 command+i</p>

<h4>2. 标记完成</h4>

<p>command+d</p>

<h4>3. 标记取消</h4>

<p>command+m</p>

<h4>4. 打包</h4>

<p>command+shift+a</p>

<h4>5. 打标签</h4>

<p>在文本后面添加@标签内容，当你标记完成或者取消的时候，他会自动打上标签。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[面向切面编程(AOP)]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/25/qie-mian-bian-cheng/"/>
    <updated>2012-12-25T22:46:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/25/qie-mian-bian-cheng</id>
    <content type="html"><![CDATA[<h2>什么是面向切面编程？</h2>

<p>面向切面编程, Aspect Oriented Programming(AOP)。主要实现的是将业务逻辑处理过程以切面为维度进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。也就是说，<strong>在不修改函数A的前提下</strong>，在函数A前后插入业务逻辑B, C, D..</p>

<!--more-->


<h2>基于Python Decorator的切面编程</h2>

<p>Python的decorator功能很强大，它能在<font color="red"><strong>运行期间拿到函数的上下文</strong></font>，并且赋予你足够的权限去做很多事情。这恰恰符合面向切面编程的设计方式，你可以通过decorator方便的实现这个功能。</p>

<p>直接上代码：</p>

<p><strong>func_section decorator代码</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def func_section(before_chain=[], after_chain=[]):
</span><span class='line'>  def func_wrap(func):
</span><span class='line'>    def wrap(*args, **kwargs):
</span><span class='line'>      for before_func in before_chain:
</span><span class='line'>        try:
</span><span class='line'>          before_func(*args, **kwargs)
</span><span class='line'>        except Exception:
</span><span class='line'>          continue
</span><span class='line'>      res = func(*args, **kwargs)
</span><span class='line'>
</span><span class='line'>      for after_func in after_chain:
</span><span class='line'>        try:
</span><span class='line'>          after_func(*args, **kwargs)
</span><span class='line'>        except Exception:
</span><span class='line'>          continue
</span><span class='line'>      return res
</span><span class='line'>    return wrap
</span><span class='line'>  return func_wrap</span></code></pre></td></tr></table></div></figure>


<p><strong> 如何使用？</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def example():
</span><span class='line'>  def before_saying(self):
</span><span class='line'>    print("I know your name %s" % self.name)
</span><span class='line'>
</span><span class='line'>  def before_saving(self):
</span><span class='line'>    print("I will notify your name %s" % self.name)
</span><span class='line'>
</span><span class='line'>  def after_saving(self):
</span><span class='line'>    print("After saving your name %s " % self.name)
</span><span class='line'>
</span><span class='line'>  def done(self):
</span><span class='line'>    print("Everything is ok %s " % self.name)
</span><span class='line'>
</span><span class='line'>  class FuncTest():
</span><span class='line'>    def __init__(self, name):
</span><span class='line'>      self.name = name
</span><span class='line'>
</span><span class='line'>    def __i_know_you(self):
</span><span class='line'>      print("I know you guy %s " % self.name)
</span><span class='line'>
</span><span class='line'>    @func_section(before_chain=[__i_know_you, 
</span><span class='line'>        before_saying, before_saving], 
</span><span class='line'>        after_chain=[after_saving, done])
</span><span class='line'>    def save(self):
</span><span class='line'>      print("Save name %s " % self.name)
</span><span class='line'>      return self.name
</span><span class='line'>
</span><span class='line'>  test = FuncTest(name=u'chenchiyuan')
</span><span class='line'>  print(test.save())
</span><span class='line'>
</span><span class='line'>&gt;&gt;&gt; example()
</span><span class='line'>I know you guy chenchiyuan 
</span><span class='line'>I know your name chenchiyuan
</span><span class='line'>I will notify your name chenchiyuan
</span><span class='line'>Save name chenchiyuan 
</span><span class='line'>After saving your name chenchiyuan 
</span><span class='line'>Everything is ok chenchiyuan 
</span><span class='line'>chenchiyuan</span></code></pre></td></tr></table></div></figure>


<h2>看了这么多，它能干什么？</h2>

<p><font color="red"><strong>它的作用就是减少你的代码的耦合度</strong></font></p>

<p>还不明白？我来举个最简单的例子。</p>

<p>现在有个函数叫做eat()，业务逻辑就是饿了要吃饭，而且已经很多地方调用它了。现在我有个需求，在每次吃饭之前我要吃点开胃菜before_eat()，吃饭之后，我要刷牙洗口after_eat()。怎么实现呢？</p>

<h4>1. 懒人的方法</h4>

<p>管它三七二十一，直接修改eat(), 先加上before_eat(), 再加上after_eat()。</p>

<p>评价：确实完成了功能。但是违反了<a href="http://baike.baidu.com/view/866233.htm">开闭原则</a>，而且函数耦合性很高，如果以后添加了更多需求，这段代码会臃肿不堪，业务逻辑复杂到一定规模的时候，你就祈祷神来解决你吧。</p>

<h4>2. 最笨的方法</h4>

<p>全文搜索，找出所有用到eat()的地方，前面加上before_eat(),后面加上after_eat()。</p>

<p>评价：违反了<a href="http://baike.baidu.com/view/154910.htm#2">封装原则</a>，这一系列操作对外应该是不可见的。我都懒得评价了。。</p>

<h4>3. 优雅的方法</h4>

<p>使用面向切面编程的方法。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def before_eat():
</span><span class='line'>    print(u'吃开胃菜')
</span><span class='line'>
</span><span class='line'>def after_eat():
</span><span class='line'>    print(u'刷牙')
</span><span class='line'>
</span><span class='line'>@func_section(before_chain=[before_eat, ], after_chain=[after_eat, ])
</span><span class='line'>def eat():
</span><span class='line'>    print(u'吃饭')</span></code></pre></td></tr></table></div></figure>


<p>这样，以后业务逻辑增加了，只需要将原子的业务逻辑加入函数执行链中即可。体验到它的强大了吧？</p>

<h2>题外话</h2>

<h4>1. Django中有没有类似的方式？</h4>

<p>肯定是有的，最接近的其实是signal的实现。把model.save()比喻成eat(), 那么你可以通过Django自带的before_save, after_save来实现在save的切面前后添加业务逻辑。这样做远远比你重写save方法好得多。</p>

<h4>2. 还有什么注意的东西？</h4>

<p>顺便提提对象的方法实现。instance.do_something(<em>args, **kwargs)。在切面编程拿到的形式是do_something(instance, </em>args, **kwargs)。这其实就是面向对象的最核心的实现技巧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据导出从此无忧:tablib]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/24/shu-ju-dao-chu-cong-ci-wu-you-tablib/"/>
    <updated>2012-12-24T23:39:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/24/shu-ju-dao-chu-cong-ci-wu-you-tablib</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近很喜欢在Github上搜搜项目，特别是那些短小，优美，强大的项目，不仅用起来很贴心，读起源码来也是说不出的舒服。今天时间不早了，写一篇小短文算是开个头。</p>

<!--more-->


<h2>推荐一个人先</h2>

<p>如果你玩Python, 如果同时你也玩Github。建议你关注下这个人<a href="https://github.com/kennethreitz">kennethreitz</a>。介绍他只需要用一句话He wrote requests。
如果你不知道<a href="https://github.com/kennethreitz/requests">requests</a>是什么，好吧，点进去看看，基本你用一次，以后就不会用其他的网络库了。</p>

<p>For Humans是kennethreitz的追求。短短两个单词，却让我想到了好多东西。程序员就应该像他那样，做出这些看起来美，用起来美，真正能服务于人的东西。扯多了，先说正题。</p>

<h2>tablib是啥子？</h2>

<blockquote><p>Tablib is a format-agnostic tabular dataset library, written in Python.</p></blockquote>

<p>Tablib是kennethreitz比较早的作品。它是一个数据类，如果你使用它的格式定义数据，你可以直接将数据导出成XLSX, XLS, ODS, JSON, YAML, CSV, TSV, and HTML(<strong>注意，可没说有XML哈</strong>)等格式。</p>

<p>用代码说话更清楚：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import tablib
</span><span class='line'>headers = ('first_name', 'last_name')
</span><span class='line'>
</span><span class='line'>data = [
</span><span class='line'>    ('John', 'Adams'),
</span><span class='line'>    ('George', 'Washington')
</span><span class='line'>]
</span><span class='line'>
</span><span class='line'>data = tablib.Dataset(*data, headers=headers)
</span><span class='line'>&gt;&gt;&gt; data.append(('Henry', 'Ford'))
</span><span class='line'>&gt;&gt;&gt; data.append_col((90, 67, 83), header='age')
</span><span class='line'>print data[:2]
</span><span class='line'>[('John', 'Adams', 90), ('George', 'Washington', 67)]
</span><span class='line'>&gt;&gt;&gt; print data['first_name']
</span><span class='line'>['John', 'George', 'Henry']
</span></code></pre></td></tr></table></div></figure>


<p><strong>Json</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; print data.json
</span><span class='line'>[
</span><span class='line'>  {
</span><span class='line'>    "last_name": "Adams",
</span><span class='line'>    "age": 90,
</span><span class='line'>    "first_name": "John"
</span><span class='line'>  },
</span><span class='line'>  {
</span><span class='line'>    "last_name": "Ford",
</span><span class='line'>    "age": 83,
</span><span class='line'>    "first_name": "Henry"
</span><span class='line'>  }
</span><span class='line'>]</span></code></pre></td></tr></table></div></figure>


<p><strong>CSV</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; print data.csv
</span><span class='line'>first_name,last_name,age
</span><span class='line'>John,Adams,90
</span><span class='line'>Henry,Ford,83</span></code></pre></td></tr></table></div></figure>


<p><strong>Excel</strong>(话说我也写过，和这个tablib一对比，果断删掉重写= =)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt;&gt;&gt; open('people.xls', 'wb').write(data.xls)</span></code></pre></td></tr></table></div></figure>


<h2>它能做什么？</h2>

<p>我见到这货第一反应是：如果我写了一层Django Model和tablib的Adapter之后，以后数据的导出就再也不费功夫了，Model的数据都可以自行的输出成理想的格式，太美妙了。瞬间有了实现的冲动。冷静的去github上瞅了一眼，我想到的大家几年前就想到了= =详情请看<a href="https://github.com/joshourisman/django-tablib">django-tablib传送门</a></p>

<p>用处不限于此，如果你经常需要将输入导入导出，建议你好好想想这货可以怎么帮你。这提高的效率可不是一点点。</p>

<h2>安装</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pip install tablib</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ easy_install tablib</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Sublime搭建你自己的Django IDE]]></title>
    <link href="http://chenchiyuan.github.com/blog/2012/12/22/yong-sublimeda-jian-ni-zi-ji-de-ide/"/>
    <updated>2012-12-22T17:27:00+08:00</updated>
    <id>http://chenchiyuan.github.com/blog/2012/12/22/yong-sublimeda-jian-ni-zi-ji-de-ide</id>
    <content type="html"><![CDATA[<h2>为什么使用Sublime?</h2>

<p>开发Django已经有好几年了，想了想，中途使用的IDE还真是很多。使用比较长时间的莫过于Vim和Pycharm，为什么突然想使用Sublime来作为今后的主流IDE呢？不妨来对比下一下IDE的区别。</p>

<!--more-->


<h4>Pycharm</h4>

<p>优点：说实话，Pycharm是我目前为止觉得最适合Django的IDE，最突出的功能在于他的索引查找和代码提示。</p>

<p>缺点：吃内存，这个就不多说了，用的人都懂。</p>

<h4>Vim</h4>

<p>首先，更正下大家的误区。Vim不只是一个文本编辑器，他强大的功能注定他能成为一款十分优秀的IDE。详细文章请参见 <a href="http://www.cnblogs.com/chijianqiang/archive/2012/10/30/vim-1.html">谁说VIM不是IDE</a></p>

<p>优点：非常舒服的快捷键设置，熟悉之后，能极大的提高工作效率。Bundle的管理也注定他能扩展很多非常优秀的功能。而且，在服务器上你也只能选择那么几个编辑器，Vim绝对是其中的佼佼者。</p>

<p>缺点：我不是骨灰级的Coder，所以骨子里不是很喜欢Vim和Emacs。如果哪天兴致来了想写下相应的扩展，Oh 天啦，还要学一堆东西，还是算了吧。。</p>

<h4>最后说说Sublime</h4>

<p>Sublime我看中的是他的发展性，github上现在关于Sublime的扩展越来越多，没有多久，Pycharm和Vim的优点他都能集成进来。而且，他的扩展使用python开发，我技痒的时候，也可以玩玩。能定制自己的IDE，绝对很幸福。</p>

<h2>定制自己的Sublime for Django (持续更新中。。)</h2>

<h4>我理想中的功能。</h4>

<pre><code>1.  方便的包管理。 
2.  Vim式的跳转。
3.  代码引用跳转。
4.  zencoding的体验。
</code></pre>

<h5>1. 包管理工具(<a href="http://wbond.net/sublime_packages/package_control">Package Control</a>)</h5>

<p>这个东西类似于什么呢？ apt-get, brew, pip, npm, yum &#8230;..</p>

<p>在sublime中通过组合键ctrl+~ 唤醒Python，然后输入</p>

<blockquote><p>import urllib2,os; pf=&#8217;Package Control.sublime-package&#8217;; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),&#8217;wb&#8217;).write(urllib2.urlopen(&#8216;http://sublime.wbond.net/&#8217;+pf.replace(&#8217; &#8216;,&#8217;%20&#8217;)).read()); print &#8216;Please restart Sublime Text to finish installation&#8217;</p></blockquote>

<p>从此包管理变得简单，command+p 键入install 唤醒Package Control, 你就可以对自己的安装包进行管理了。很方便吧。</p>

<h5>2. Vim跳转</h5>

<p>经过实验，我觉得Vintage(<a href="https://github.com/sublimehq/Vintage">github</a>)是最合适的Sublime Vim Plugin。</p>

<p>安装方法如下：</p>

<blockquote><p>cd ~/Library/Application\ Support/Sublime\ Text\ 2/Packages/
git clone git@github.com:sublimehq/Vintage.git &#8220;Vintage Dev&#8221;</p></blockquote>

<p>安装之后，你可以通过Esc唤醒Vim模式。是不是突然有种使用Vim的感觉啊~</p>

<h5>3. Ctags跳转 <a href="http://chenchiyuan.github.com/blog/2012/12/26/sublimezhi-ctags/">看详细版本吧</a></h5>

<p>Sublime本身支持一些函数级和文件级的跳转。</p>

<p><strong>文件跳转</strong> Command+p 唤醒交互，输入文件名即可。</p>

<p><strong>文件内函数跳转</strong> Command+p 输入@。</p>

<p>但是这些还没解决我的最大需求，我需要的是函数级别的跳转。举个例子，很想从<strong>from django.db import models</strong>中查看下源代码models的实现。怎么办呢？千万不要傻乎乎
的去找pip site-packages下的django目录，然后逐级的找到models。要记住，你是程序员。</p>

<p>上网找了下，发现Ctags是理想的工具，而且他提供Sublime的支持。</p>

<p>直接在Package Control里安装即可。按照说明，Control+Shift+左键狂点函数名，还是没有跳转过去。。顿时泪流满面。这是为什么了。</p>

<p>仔细研究了下，Ctags的原理其实很简单，他会将索引存放在.tags文件里面，之所以找不到相应的位置，是没有索引住。默认情况下他不会去找virtualenvs下的配置。好吧。感觉这个可以开个另外的博文来详细讲讲&#8212;-<a href="http://chenchiyuan.github.com/blog/2012/12/26/sublimezhi-ctags/">解决方法</a></p>
]]></content>
  </entry>
  
</feed>
